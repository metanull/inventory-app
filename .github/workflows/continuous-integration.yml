name: Continuous Integration

permissions:
  contents: write  # Need write permissions for version bump
  pull-requests: write

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

  workflow_dispatch:
    # Allow manual triggering

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  
  backend-validation:
    name: Backend Validation (PHP/Laravel)
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v5

      - name: "Setup > Image > Install php"
        uses: shivammathur/setup-php@v2
        with:
          # php-version: '8.2'  # If not specified, setup-php will use the version defined in composer.lock
          extensions: fileinfo, zip, sqlite3, pdo_sqlite, gd, exif
          coverage: xdebug
          tools: pint, phpunit, pest

      - name: "Check > Composer > Check requirements"
        run: |
          composer check-platform-reqs

      - name: "Check > Composer > Validate composer.json"
        run: |
          composer validate --with-dependencies --strict

      - name: "Setup > Composer > Install Dependencies"
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: "Setup > Composer > Check Vulnerabilities"
        run: |
          composer audit --format=summary

      - name: "Setup > Laravel > Create .env file from example"
        run: |
          if(-not(Test-Path ".env.local.example")) {
            throw "No .env.local.example file found!"
          }
          if(-not(Test-Path ".env")) {
            Copy-Item .env.local.example .env -ErrorAction Stop
          }

      - name: "Setup > Laravel > Generate application key"
        run: |
          php artisan key:generate

      - name: "Setup > Laravel > Create database"
        run: |
          php artisan migrate --force

      - name: "Check > Laravel > Linting"
        run: |
          ./vendor/bin/pint --bail

      - name: "Check > Laravel > Run CI/CD Tests"
        env:
          DB_CONNECTION: sqlite
          # DB_DATABASE: database/database.sqlite
        run: |
          php artisan test --testsuite=CiCd --coverage --parallel --no-ansi --stop-on-failure
      
      - name: "Check > Laravel > Run Unit Tests"
        env:
          DB_CONNECTION: sqlite
          # DB_DATABASE: database/database.sqlite
        run: |
          php artisan test --testsuite=Unit --coverage --parallel --no-ansi --stop-on-failure
      
      - name: "Check > Laravel > Run Feature Tests"
        env:
          DB_CONNECTION: sqlite
          # DB_DATABASE: database/database.sqlite
        run: |
          php artisan test --testsuite=Feature --coverage --parallel --no-ansi --stop-on-failure

  frontend-validation:
    name: Frontend Validation (Node.js/Vue)
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v5

      - name: "Setup > Image > Install Node.js"
        uses: actions/setup-node@v5
        with:
          node-version: "22.17.0"

      - name: "Setup > npm > Install Dependencies"
        run: |
          npm ci --no-audit --no-fund

      - name: "Check > npm > Check Vulnerabilities"
        run: |
          npm audit --audit-level moderate

      - name: "Check > npm > Build"
        run: |
          npm run build --if-present

      - name: "Check > npm > Linting"
        run: |
          npm run lint

      - name: "Check > npm > Run Tests"
        run: |
          npm run test:all

  ci-success:
    name: CI Success
    runs-on: windows-latest
    needs: [backend-validation, frontend-validation]
    if: always()

    steps:
      - name: Check all jobs succeeded
        run: |
          $backendResult = "${{ needs.backend-validation.result }}"
          $frontendResult = "${{ needs.frontend-validation.result }}"
          
          if ($backendResult -ne "success" -or $frontendResult -ne "success") {
            Write-Output "One or more validation jobs failed"
            exit 1
          }
