name: Continuous Integration

permissions:
  contents: write  # Need write permissions for version bump
  pull-requests: write

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - 'docs/**'
      - '.github/instructions/**'
      - '.github/workflows/continuous-deployment.yml'
      - '.github/workflows/continuous-deployment_github-pages.yml'
      - '.github/workflows/publish-npm-github-package.yml'
  workflow_dispatch:
    # Allow manual triggering

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  laravel-validate:
    name: Validate Laravel Application
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v5

      - name: "Setup > Image > Install php"
        uses: shivammathur/setup-php@v2
        with:
          # php-version: '8.2'  # If not specified, setup-php will use the version defined in composer.lock
          extensions: fileinfo, zip, sqlite3, pdo_sqlite, gd, exif
          coverage: xdebug
          tools: pint, phpunit, pest

      - name: "Check > Composer > Check requirements"
        run: |
          composer check-platform-reqs

      - name: "Check > Composer > Validate composer.json"
        run: |
          composer validate --with-dependencies --strict

      - name: "Setup > Composer > Install Dependencies"
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: "Setup > Composer > Check Vulnerabilities"
        run: |
          composer audit --format=summary

      - name: "Setup > Laravel > Create .env file from example"
        run: |
          if(-not(Test-Path ".env.local.example")) {
            throw "No .env.local.example file found!"
          }
          if(-not(Test-Path ".env")) {
            Copy-Item .env.local.example .env -ErrorAction Stop
          }

      - name: "Setup > Laravel > Generate application key"
        run: |
          php artisan key:generate

      - name: "Setup > Laravel > Create database"
        run: |
          php artisan migrate --force

      - name: "Setup > Image > Install Node.js"
        uses: actions/setup-node@v5
        with:
          node-version: "20.x"

      - name: "Setup > npm > Install Dependencies"
        run: |
          npm ci --no-audit --no-fund

      - name: "Check > npm > Check Vulnerabilities"
        run: |
          npm audit --audit-level moderate

      - name: "Check > npm > Build"
        run: |
          npm run build --if-present

      - name: "Check > Laravel > Linting"
        run: |
          ./vendor/bin/pint --bail

      - name: "Check > Laravel > Run Tests"
        env:
          DB_CONNECTION: sqlite
          # DB_DATABASE: database/database.sqlite
        run: |
          php artisan test --coverage --parallel --no-ansi --stop-on-failure

    #- name: 'Check > npm > Run Tests'
    #  run: |
    #    npm test

      # Version bump section - runs at the end of validation job
      - name: Configure Git for version bump
        if: github.event_name == 'pull_request'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump type from PR labels
        if: github.event_name == 'pull_request'
        id: version-bump-type
        run: |
          # Get PR labels using GitHub API
          $prNumber = "${{ github.event.pull_request.number }}"
          $prUrl = "https://api.github.com/repos/${{ github.repository }}/pulls/$prNumber"
          
          $prData = Invoke-RestMethod -Uri $prUrl -Headers @{
            "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/vnd.github.v3+json"
          }
          
          $labels = $prData.labels | ForEach-Object { $_.name }
          Write-Output "PR Labels: $($labels -join ', ')"
          
          # Default to patch version bump (safest)
          $bumpType = "patch"
          
          # Check labels in priority order
          if ($labels -contains "breaking-change") {
            $bumpType = "major"
          }
          elseif ($labels -contains "feature") {
            $bumpType = "minor"
          }
          elseif ($labels -contains "bugfix") {
            $bumpType = "patch"
          }
          
          Write-Output "bump-type=$bumpType" >> $env:GITHUB_OUTPUT
          Write-Output "Detected version bump type: $bumpType (based on labels: $($labels -join ', '))"

      - name: Bump version
        if: github.event_name == 'pull_request'
        run: |
          $bumpType = "${{ steps.version-bump-type.outputs.bump-type }}"
          npm version $bumpType --no-git-tag-version
          
          # Get new version
          $newVersion = (Get-Content package.json | ConvertFrom-Json).version
          Write-Output "New version: $newVersion"

      - name: Commit and push version bump to PR
        if: github.event_name == 'pull_request'
        run: |
          $newVersion = (Get-Content package.json | ConvertFrom-Json).version
          
          # Check if there are changes to commit
          $changes = git diff --name-only
          if ($changes) {
            git add package.json package-lock.json
            git commit -m "chore: bump version to $newVersion"
            git push origin ${{ github.head_ref }}
            Write-Output "Version bumped to $newVersion and pushed to PR branch"
          } else {
            Write-Output "No version changes needed"
          }


