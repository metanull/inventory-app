name: Generate GitHub Pages with Jekyll

on:
  push:
    branches: [ main ]
  # Removed pull_request trigger to avoid duplicate runs
  # The workflow will run when PR is merged via the push to main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write  # Write access needed to create/push to gh-pages branch
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Generate blog posts from commits
  # This job runs only when main branch is updated (direct push or PR merge)
  generate-posts:
    runs-on: ubuntu-latest
    # Only run on push to main branch (includes PR merges)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Setup gh-pages branch and generate posts
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local core.autocrlf false
          git config --local core.eol lf
          
          # Create or checkout gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "gh-pages branch exists, checking it out..."
            git checkout -b gh-pages origin/gh-pages
          else
            echo "Creating new gh-pages branch..."
            git checkout --orphan gh-pages
            git rm -rf . || true
            
            # Copy Jekyll configuration and layouts from main
            git checkout main -- docs/_config.yml docs/Gemfile docs/_layouts/ docs/index.md docs/archive.md docs/README.md || true
            
            # Create basic structure for gh-pages
            mkdir -p _posts _layouts
            if [ -f docs/_config.yml ]; then
              cp docs/_config.yml _config.yml
            fi
            if [ -f docs/Gemfile ]; then
              cp docs/Gemfile Gemfile
            fi
            if [ -d docs/_layouts ]; then
              cp -r docs/_layouts/* _layouts/
            fi
            if [ -f docs/index.md ]; then
              cp docs/index.md index.md
            fi
            if [ -f docs/archive.md ]; then
              cp docs/archive.md archive.md
            fi
            if [ -f docs/README.md ]; then
              cp docs/README.md README.md
            fi
            
            # Remove docs/ prefix from config if present
            sed -i 's|baseurl: "/inventory-app"|baseurl: "/inventory-app"|g' _config.yml || true
          fi
          
          # Ensure _posts directory exists
          mkdir -p _posts
          
          # Generate a single blog post for this push/PR
          push_date=$(date '+%Y-%m-%d')
          push_time=$(date '+%H:%M:%S')
          
          # Get information about this push
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get commits in this push
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              # Normal push - get commits between before and after
              commit_range="${{ github.event.before }}..${{ github.sha }}"
              commits_in_push=$(git log --pretty=format:"%H|%ai|%s|%an|%ae" $commit_range)
            else
              # First push to branch - get all commits
              commits_in_push=$(git log --pretty=format:"%H|%ai|%s|%an|%ae" ${{ github.sha }})
            fi
            
            # Count commits in this push
            commit_count=$(echo "$commits_in_push" | wc -l)
            if [ -z "$commits_in_push" ]; then
              commit_count=0
            fi
            
            # Get push information
            pusher="${{ github.actor }}"
            push_ref="${{ github.ref }}"
            push_sha="${{ github.sha }}"
            
            # Check if this was a PR merge by looking at commit messages
            pr_info=""
            if echo "$commits_in_push" | grep -q "Merge pull request"; then
              pr_number=$(echo "$commits_in_push" | grep "Merge pull request" | head -1 | sed 's/.*#\([0-9]*\).*/\1/')
              pr_title=$(echo "$commits_in_push" | grep "Merge pull request" | head -1 | cut -d'|' -f3)
              pr_info="PR #$pr_number"
            fi
            
            # Create meaningful title for the push
            if [ -n "$pr_info" ]; then
              # PR merge - use PR title
              push_title=$(echo "$pr_title" | sed 's/Merge pull request #[0-9]* from [^/]*\///')
              post_type="pull-request"
            else
              # Direct push - use first commit subject or generic title
              if [ $commit_count -eq 1 ]; then
                push_title=$(echo "$commits_in_push" | head -1 | cut -d'|' -f3)
                post_type="direct-push"
              else
                push_title="Multiple commits pushed to main"
                post_type="direct-push"
              fi
            fi
            
            # Create safe filename
            safe_title=$(echo "$push_title" | sed 's/[^a-zA-Z0-9 ]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            max_title_length=150
            if [ ${#safe_title} -gt $max_title_length ]; then
              truncated=$(echo "$safe_title" | cut -c1-$max_title_length)
              if echo "$truncated" | grep -q "-"; then
                safe_title=$(echo "$truncated" | sed 's/-[^-]*$//')
              else
                safe_title="$truncated"
              fi
            fi
            safe_title=$(echo "$safe_title" | tr '[:upper:]' '[:lower:]')
            
            # Create unique filename with timestamp to avoid conflicts
            timestamp=$(date '+%H%M%S')
            filename="_posts/${push_date}-${timestamp}-${safe_title}.md"
            
            # Escape title for YAML
            escaped_title=$(echo "$push_title" | sed 's/"/\\"/g')
            display_title="$escaped_title"
            if [ ${#display_title} -gt 100 ]; then
              display_title="${escaped_title:0:97}..."
            fi
            
            # Calculate total file changes across all commits
            total_files=0
            total_insertions=0
            total_deletions=0
            
            while IFS='|' read -r hash date subject author email; do
              files=$(git diff-tree --no-commit-id --name-only -r $hash | wc -l)
              insertions=$(git show --shortstat $hash | grep -o '[0-9]\+ insertion' | grep -o '[0-9]\+' || echo "0")
              deletions=$(git show --shortstat $hash | grep -o '[0-9]\+ deletion' | grep -o '[0-9]\+' || echo "0")
              
              total_files=$((total_files + files))
              total_insertions=$((total_insertions + insertions))
              total_deletions=$((total_deletions + deletions))
            done <<< "$commits_in_push"
            
            echo "Creating push post: $filename"
            
            # Create Jekyll front matter and content for push
            cat > "$filename" << EOF
          ---
          layout: post
          title: "$display_title"
          full_title: "$escaped_title"
          date: $push_date $push_time +0000
          author: $pusher
          push_sha: $push_sha
          commit_count: $commit_count
          post_type: $post_type
          pr_info: "$pr_info"
          categories: [pushes, development]
          tags: [git, deployment, $post_type]
          ---

          # $escaped_title

          ## Push Details

          **Author:** $pusher  
          **Date:** $push_date at $push_time  
          **SHA:** \`$push_sha\`  
          **Type:** $([ "$post_type" = "pull-request" ] && echo "Pull Request Merge" || echo "Direct Push")  
          $([ -n "$pr_info" ] && echo "**Pull Request:** $pr_info")
          **Commits:** $commit_count  
          **Files Changed:** $total_files  
          **Insertions:** $total_insertions  
          **Deletions:** $total_deletions  

          ## Commits in This Push

          EOF
          
          # Add each commit as a subsection
          commit_num=1
          while IFS='|' read -r hash date subject author email; do
            commit_short=\$(echo \$hash | cut -c1-7)
            cat >> "\$filename" << EOF
          ### Commit $commit_num: [\`\$commit_short\`](https://github.com/${{ github.repository }}/commit/\$hash)

          **Author:** \$author  
          **Date:** \$date  
          **Message:** \$subject  

          #### Files Modified
          \`\`\`bash
          \$(git diff-tree --no-commit-id --name-only -r \$hash)
          \`\`\`

          #### Changes
          \`\`\`diff
          \$(git show --stat \$hash)
          \`\`\`

          EOF
            commit_num=\$((commit_num + 1))
          done <<< "\$commits_in_push"
          
          # Add footer
          cat >> "\$filename" << EOF

          ---
          *This post was automatically generated from push [\`${push_sha:0:7}\`](https://github.com/${{ github.repository }}/commit/$push_sha) containing $commit_count commit(s)*
          EOF
          
          fi

      - name: Commit and push to gh-pages branch
        run: |
          # Add all generated files
          git add .
          
          if git diff --staged --quiet; then
            echo "No new posts to commit"
          else
            git commit -m "Auto-generate blog posts from commits [skip ci]"
            git push origin gh-pages
          fi

  # Build and deploy Jekyll site
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: generate-posts
    if: always() && (needs.generate-posts.result == 'success' || needs.generate-posts.result == 'skipped')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          # No working-directory needed since Jekyll files are in root of gh-pages

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        run: |
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
