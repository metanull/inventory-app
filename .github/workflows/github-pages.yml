name: Generate GitHub Pages with Jekyll

on:
  push:
    branches: [ main ]
  # Removed pull_request trigger to avoid duplicate runs
  # The workflow will run when PR is merged via the push to main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write  # Write access needed to create/push to gh-pages branch
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Generate blog posts from commits
  # This job runs only when main branch is updated (direct push or PR merge)
  generate-posts:
    runs-on: ubuntu-latest
    # Only run on push to main branch (includes PR merges)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Setup gh-pages branch and generate posts
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local core.autocrlf false
          git config --local core.eol lf
          
          # Create or checkout gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "gh-pages branch exists, checking it out..."
            git checkout -b gh-pages origin/gh-pages
          else
            echo "Creating new gh-pages branch..."
            git checkout --orphan gh-pages
            git rm -rf . || true
            
            # Copy Jekyll configuration and layouts from main
            git checkout main -- docs/_config.yml docs/Gemfile docs/_layouts/ docs/index.md docs/archive.md docs/README.md || true
            
            # Create basic structure for gh-pages
            mkdir -p _posts _layouts
            if [ -f docs/_config.yml ]; then
              cp docs/_config.yml _config.yml
            fi
            if [ -f docs/Gemfile ]; then
              cp docs/Gemfile Gemfile
            fi
            if [ -d docs/_layouts ]; then
              cp -r docs/_layouts/* _layouts/
            fi
            if [ -f docs/index.md ]; then
              cp docs/index.md index.md
            fi
            if [ -f docs/archive.md ]; then
              cp docs/archive.md archive.md
            fi
            if [ -f docs/README.md ]; then
              cp docs/README.md README.md
            fi
            
            # Remove docs/ prefix from config if present
            sed -i 's|baseurl: "/inventory-app"|baseurl: "/inventory-app"|g' _config.yml || true
          fi
          
          # Ensure _posts directory exists
          mkdir -p _posts
          
          # Get all commits on main branch
          git log main --pretty=format:"%H|%ai|%s|%an|%ae" --reverse > commits.log
          
          # Generate Jekyll posts for each commit
          while IFS='|' read -r hash date subject author email; do
            # Format date for Jekyll (YYYY-MM-DD)
            post_date=$(echo $date | cut -d' ' -f1)
            post_time=$(echo $date | cut -d' ' -f2)
            
            # Create safe filename with proper length limits
            # Remove special characters and limit to reasonable length
            safe_subject=$(echo "$subject" | sed 's/[^a-zA-Z0-9 ]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            
            # Limit filename to filesystem-safe length (most filesystems support 255 chars)
            # Leave room for date prefix and .md extension: 255 - 10 (date) - 1 (dash) - 3 (.md) = 241
            max_subject_length=200
            if [ ${#safe_subject} -gt $max_subject_length ]; then
              # Truncate at word boundary if possible
              truncated=$(echo "$safe_subject" | cut -c1-$max_subject_length)
              # Try to cut at last dash to avoid breaking words
              if echo "$truncated" | grep -q "-"; then
                safe_subject=$(echo "$truncated" | sed 's/-[^-]*$//')
              else
                safe_subject="$truncated"
              fi
              # Add indicator that title was truncated
              safe_subject="${safe_subject}-truncated"
            fi
            safe_subject=$(echo "$safe_subject" | tr '[:upper:]' '[:lower:]')
            filename="_posts/${post_date}-${safe_subject}.md"
            
            # Skip if post already exists
            if [ ! -f "$filename" ]; then
              echo "Creating post: $filename"
              
              # Get commit details
              commit_message=$(git log -1 --pretty=format:"%B" $hash)
              files_changed=$(git diff-tree --no-commit-id --name-only -r $hash | wc -l)
              insertions=$(git show --shortstat $hash | grep -o '[0-9]\+ insertion' | grep -o '[0-9]\+' || echo "0")
              deletions=$(git show --shortstat $hash | grep -o '[0-9]\+ deletion' | grep -o '[0-9]\+' || echo "0")
              
              # Create Jekyll front matter and content
              # Escape title for YAML (handle quotes and special characters)
              escaped_title=$(echo "$subject" | sed 's/"/\\"/g')
              
              # If title is very long, create a shorter display title but keep full title in content
              display_title="$escaped_title"
              if [ ${#display_title} -gt 100 ]; then
                display_title="${escaped_title:0:97}..."
              fi
              
              cat > "$filename" << EOF
          ---
          layout: post
          title: "$display_title"
          full_title: "$escaped_title"
          date: $date
          author: $author
          commit: $hash
          categories: [commits, development]
          tags: [git, changelog]
          ---

          # $escaped_title

          ## Commit Details

          **Author:** $author  
          **Date:** $post_date at $post_time  
          **Hash:** \`$hash\`  
          **Files Changed:** $files_changed  
          **Insertions:** ${insertions:-0}  
          **Deletions:** ${deletions:-0}  

          ## Commit Message

          \`\`\`
          $commit_message
          \`\`\`

          ## Files Modified

          \`\`\`bash
          $(git diff-tree --no-commit-id --name-only -r $hash)
          \`\`\`

          ## Changes Summary

          \`\`\`diff
          $(git show --stat $hash)
          \`\`\`

          ---
          *This post was automatically generated from commit [\`${hash:0:7}\`](https://github.com/${{ github.repository }}/commit/$hash)*
          EOF
            fi
          done < commits.log

      - name: Commit and push to gh-pages branch
        run: |
          # Add all generated files
          git add .
          
          if git diff --staged --quiet; then
            echo "No new posts to commit"
          else
            git commit -m "Auto-generate blog posts from commits [skip ci]"
            git push origin gh-pages
          fi

  # Build and deploy Jekyll site
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: generate-posts
    if: always() && (needs.generate-posts.result == 'success' || needs.generate-posts.result == 'skipped')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          # No working-directory needed since Jekyll files are in root of gh-pages

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        run: |
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
